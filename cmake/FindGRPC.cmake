#
# Locate and configure the gRPC library
#
# Adds the following targets:
#
#  gRPC::grpc - gRPC library
#  gRPC::grpc++ - gRPC C++ library
#  gRPC::grpc++_reflection - gRPC C++ reflection library
#  gRPC::grpc_cpp_plugin - C++ generator plugin for Protocol Buffers
#

#
# Generates C++ sources from the .proto files
#
# grpc_generate_cpp (<SRCS> <HDRS> <DEST> [<ARGN>...])
#
#  SRCS - variable to define with autogenerated source files
#  HDRS - variable to define with autogenerated header files
#  DEST - directory where the source files will be created
#  ARGN - .proto files
#
#[[include(FetchContent)
FetchContent_Declare(
        gRPC
        GIT_REPOSITORY https://github.com/grpc/grpc
        GIT_TAG v1.54.0
        CMAKE_ARGS "-DABSL_PROPAGATE_CXX_STD=on"
)
set(FETCHCONTENT_QUIET OFF)
FetchContent_MakeAvailable(gRPC)]]

function(GRPC_GENERATE_CPP SRCS HDRS DEST)
    if (NOT ARGN)
        # message(SEND_ERROR "Error: GRPC_GENERATE_CPP() called without any proto files")
        return()
    endif ()

    if (GRPC_GENERATE_CPP_APPEND_PATH)
        # Create an include path for each file specified
        foreach (FIL ${ARGN})
            get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
            get_filename_component(ABS_PATH ${ABS_FIL} PATH)
            list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
            if (${_contains_already} EQUAL -1)
                list(APPEND _protobuf_include_path -I ${ABS_PATH})
            endif ()
        endforeach ()
    else ()
        set(_protobuf_include_path -I ../../../cmake/modules)
    endif ()

    if (DEFINED PROTOBUF_IMPORT_DIRS)
        foreach (DIR ${PROTOBUF_IMPORT_DIRS})
            get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
            list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
            if (${_contains_already} EQUAL -1)
                list(APPEND _protobuf_include_path -I ${ABS_PATH})
            endif ()
        endforeach ()
    endif ()

    set(${SRCS})
    set(${HDRS})
    foreach (FIL ${ARGN})
        get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
        get_filename_component(FIL_WE ${FIL} NAME_WE)
        string(REGEX REPLACE "(${CMAKE_CURRENT_SOURCE_DIR}/)|(/${FIL_WE}.proto)" "" PROTO_PATH ${FIL})

        list(APPEND ${SRCS} "${DEST}/${PROTO_PATH}/${FIL_WE}.grpc.pb.cc")
        list(APPEND ${HDRS} "${DEST}/${PROTO_PATH}/${FIL_WE}.grpc.pb.h")

        add_custom_command(
                OUTPUT "${DEST}/${PROTO_PATH}/${FIL_WE}.grpc.pb.cc"
                "${DEST}/${PROTO_PATH}/${FIL_WE}.grpc.pb.h"
                COMMAND protobuf::protoc
                ARGS --grpc_out ${DEST}/${PROTO_PATH} ${_protobuf_include_path} --plugin=protoc-gen-grpc=${GRPC_CPP_PLUGIN} ${ABS_FIL}
                DEPENDS ${ABS_FIL} protobuf::protoc gRPC::grpc_cpp_plugin
                COMMENT "Running C++ gRPC compiler on ${FIL}"
                VERBATIM)
    endforeach ()

    set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
    set(${SRCS} ${${SRCS}} PARENT_SCOPE)
    set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

# By default have GRPC_GENERATE_CPP macro pass -I to protoc
# for each directory where a proto file is referenced.
if (NOT DEFINED GRPC_GENERATE_CPP_APPEND_PATH)
    set(GRPC_GENERATE_CPP_APPEND_PATH TRUE)
endif ()

# Find gRPC include directory
find_path(GRPC_INCLUDE_DIR grpc/grpc.h PATHS ${GRPC_ROOT_DIR}/include)
mark_as_advanced(GRPC_INCLUDE_DIR)

set(GRPC_LIB_PATH ${GRPC_ROOT_DIR}/lib ${GRPC_ROOT_DIR}/lib64 /opt/homebrew/lib)
set(GRPC_BIN_PATH ${GRPC_ROOT_DIR}/bin /opt/homebrew/bin)

# Find gRPC library
find_library(GRPC_LIBRARY NAMES grpc PATHS ${GRPC_LIB_PATH})
mark_as_advanced(GRPC_LIBRARY)
add_library(gRPC::grpc UNKNOWN IMPORTED)
set_target_properties(gRPC::grpc PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES "-lpthread;-ldl"
        IMPORTED_LOCATION ${GRPC_LIBRARY}
)

# Find gRPC C++ library
find_library(GRPC_GRPC++_LIBRARY NAMES grpc++ PATHS ${GRPC_LIB_PATH})
mark_as_advanced(GRPC_GRPC++_LIBRARY)
add_library(gRPC::grpc++ UNKNOWN IMPORTED)
set_target_properties(gRPC::grpc++ PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES gRPC::grpc
        IMPORTED_LOCATION ${GRPC_GRPC++_LIBRARY}
)

# Find gRPC C++ reflection library
find_library(GRPC_GRPC++_REFLECTION_LIBRARY NAMES grpc++_reflection PATHS ${GRPC_LIB_PATH})
mark_as_advanced(GRPC_GRPC++_REFLECTION_LIBRARY)
add_library(gRPC::grpc++_reflection UNKNOWN IMPORTED)
set_target_properties(gRPC::grpc++_reflection PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES gRPC::grpc++
        IMPORTED_LOCATION ${GRPC_GRPC++_REFLECTION_LIBRARY}
)

# Find gRPC gpr library
find_library(GPR_LIBRARY NAMES gpr PATHS ${GRPC_LIB_PATH})
mark_as_advanced(GPR_LIBRARY)
add_library(gRPC::gpr UNKNOWN IMPORTED)
set_target_properties(gRPC::gpr PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES gRPC::grpc
        IMPORTED_LOCATION ${GPR_LIBRARY}
)

# Find grpc_plugin_support library
find_library(GRPC_PLUGIN_SUPPORT_LIBRARY NAMES grpc_plugin_support PATHS ${GRPC_LIB_PATH})
mark_as_advanced(GRPC_PLUGIN_SUPPORT_LIBRARY)
add_library(gRPC::grpc_plugin_support UNKNOWN IMPORTED)
set_target_properties(gRPC::grpc_plugin_support PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES gRPC::grpc
        IMPORTED_LOCATION ${GRPC_PLUGIN_SUPPORT_LIBRARY}
)

# Find protoc library
find_library(PROTOC_LIBRARY NAMES grpc_plugin_support PATHS ${GRPC_LIB_PATH})
mark_as_advanced(PROTOC_LIBRARY)
add_library(gRPC::protoc UNKNOWN IMPORTED)
set_target_properties(gRPC::protoc PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES ${GRPC_INCLUDE_DIR}
        INTERFACE_LINK_LIBRARIES protobuf::libprotoc
        IMPORTED_LOCATION ${PROTOC_LIBRARY}
)

# Find gRPC CPP generator
find_program(GRPC_CPP_PLUGIN NAMES grpc_cpp_plugin PATHS ${GRPC_BIN_PATH} NO_DEFAULT_PATH)
mark_as_advanced(GRPC_CPP_PLUGIN)
add_executable(gRPC::grpc_cpp_plugin IMPORTED)
set_target_properties(gRPC::grpc_cpp_plugin PROPERTIES
        IMPORTED_LOCATION ${GRPC_CPP_PLUGIN}
)

include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GRPC DEFAULT_MSG
        GRPC_LIBRARY GRPC_INCLUDE_DIR GRPC_GRPC++_REFLECTION_LIBRARY GRPC_CPP_PLUGIN
)

